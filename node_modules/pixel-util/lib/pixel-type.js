// Generated by CoffeeScript 1.10.0
var PixelType, Promise, imageType, mime;

Promise = require('bluebird');

imageType = require('image-type');

mime = require('mime');

mime.define({
  'image/vnd.ms-photo': ['jxr']
});

mime.extensions['image/vnd.ms-photo'] = 'jxr';

mime.extensions['image/jpeg'] = 'jpg';

mime.extensions['image/tiff'] = 'tif';

PixelType = (function() {
  function PixelType() {}

  PixelType.prototype.get = function(file) {
    var pixelType, querystring, trusted, type, url;
    type = this.getTypeof(file);
    trusted = (function() {
      switch (type) {
        case 'datauri':
          return this.getBuffer(file);
        case 'binary':
          return this.getBufferBinary(file);
        case 'blob':
          return this.readAsArrayBufferSync(file);
        case 'file':
          return this.readAsArrayBufferSync(file);
        default:
          return file;
      }
    }).call(this);
    pixelType = (function() {
      var ref;
      switch (type) {
        case 'url':
          ref = trusted.split('?'), url = ref[0], querystring = ref[1];
          return this.lookupImageType(url);
        case 'path':
          return this.lookupImageType(trusted);
        case 'image':
          return this.lookupImageType(trusted.src);
        default:
          return this.getImageType(trusted);
      }
    }).call(this);
    if (pixelType == null) {
      pixelType = {};
    }
    pixelType.type = type;
    return pixelType;
  };

  PixelType.prototype.detect = function(file) {
    var promise, type;
    type = this.getTypeof(file);
    promise = (function() {
      switch (type) {
        case 'datauri':
          return Promise.resolve(this.getBuffer(file));
        case 'binary':
          return Promise.resolve(this.getBufferBinary(file));
        case 'blob':
          return this.readAsArrayBuffer(file);
        case 'file':
          return this.readAsArrayBuffer(file);
        default:
          return Promise.resolve(file);
      }
    }).call(this);
    return promise.then((function(_this) {
      return function(trusted) {
        var pixelType, querystring, url;
        pixelType = (function() {
          var ref;
          switch (type) {
            case 'url':
              ref = trusted.split('?'), url = ref[0], querystring = ref[1];
              return this.lookupImageType(url);
            case 'path':
              return this.lookupImageType(trusted);
            case 'image':
              return this.lookupImageType(trusted.src);
            default:
              return this.getImageType(trusted);
          }
        }).call(_this);
        if (pixelType == null) {
          pixelType = {};
        }
        pixelType.type = type;
        return pixelType;
      };
    })(this));
  };

  PixelType.prototype.getTypeof = function(file) {
    var type;
    if (Buffer.isBuffer(file)) {
      return 'buffer';
    }
    type = Object.prototype.toString.call(file);
    type = type.toString().match(/(\w+)\]/)[1].toLowerCase();
    switch (type) {
      case 'string':
        switch (false) {
          case !file.match(/^https?:\/\//):
            return 'url';
          case !file.match(/^data:image\//):
            return 'datauri';
          case !file.match(/^(?:\w:)?[\w\-\/\\.~ ]+$/):
            return 'path';
          default:
            return 'binary';
        }
        break;
      case 'htmlimageelement':
        return 'image';
      default:
        return type;
    }
  };

  PixelType.prototype.getImageType = function(buffer) {
    if (buffer instanceof ArrayBuffer) {
      buffer = new Uint8Array(buffer);
    }
    return imageType(buffer);
  };

  PixelType.prototype.lookupImageType = function(url) {
    var mimeType;
    mimeType = mime.lookup(url);
    return {
      mime: mimeType,
      ext: mime.extension(mimeType)
    };
  };

  PixelType.prototype.getBuffer = function(datauri) {
    return new Buffer(datauri.slice(datauri.indexOf(',') + 1), 'base64');
  };

  PixelType.prototype.getBufferBinary = function(binary) {
    return new Buffer(binary, 'binary');
  };

  PixelType.prototype.readAsArrayBuffer = function(blob) {
    return new Promise(function(resolve, reject) {
      var reader;
      if (typeof FileReader === "undefined" || FileReader === null) {
        return reject(new ArrayBuffer(0));
      }
      reader = new FileReader;
      reader.readAsArrayBuffer(blob);
      return reader.onload = function() {
        return resolve(reader.result);
      };
    });
  };

  PixelType.prototype.readAsArrayBufferSync = function(blob) {
    var reader;
    if (typeof FileReaderSync !== "undefined" && FileReaderSync !== null) {
      reader = new FileReaderSync;
      return reader.readAsArrayBuffer(blob);
    } else {
      return new ArrayBuffer(0);
    }
  };

  return PixelType;

})();

module.exports = new PixelType;

module.exports.PixelType = PixelType;
