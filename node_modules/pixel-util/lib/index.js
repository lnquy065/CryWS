// Generated by CoffeeScript 1.10.0
var PixelData, PixelUtil, Promise, fs, request,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Promise = require('bluebird');

PixelData = (require('./pixel-data')).PixelData;

if (typeof window === "undefined" || window === null) {
  request = require('request');
  fs = require('fs');
}

PixelUtil = (function(superClass) {
  extend(PixelUtil, superClass);

  function PixelUtil() {
    return PixelUtil.__super__.constructor.apply(this, arguments);
  }

  PixelUtil.prototype.createBuffer = function(file) {
    var promise;
    promise = (function() {
      switch (this.getTypeof(file)) {
        case 'path':
          return this.fetchFile(file);
        case 'url':
          return this.fetchBuffer(file);
        case 'datauri':
          return Promise.resolve(this.getBuffer(file));
        case 'binary':
          return Promise.resolve(this.getBufferBinary(file));
        case 'blob':
          return this.readAsArrayBuffer(file);
        case 'file':
          return this.readAsArrayBuffer(file);
        case 'image':
          return this.fetchBuffer(file.src);
        default:
          return Promise.resolve(file);
      }
    }).call(this);
    return promise.then(function(arraybuffer) {
      return new Buffer(new Uint8Array(arraybuffer));
    });
  };

  PixelUtil.prototype.fetchFile = function(path) {
    if (typeof window === "undefined" || window === null) {
      return Promise.resolve(fs.readFileSync(path));
    } else {
      return this.fetchBuffer(path);
    }
  };

  PixelUtil.prototype.fetchBuffer = function(url) {
    if (typeof window === "undefined" || window === null) {
      return new Promise(function(resolve, reject) {
        return request({
          url: url,
          encoding: null
        }, function(error, response, buffer) {
          if (error != null) {
            return reject(error);
          }
          return resolve(buffer);
        });
      });
    } else {
      return this.fetchArrayBuffer(url);
    }
  };

  PixelUtil.prototype.fetchArrayBuffer = function(url) {
    return new Promise(function(resolve, reject) {
      var xhr;
      xhr = new XMLHttpRequest;
      xhr.open('GET', url, true);
      xhr.responseType = 'arraybuffer';
      xhr.send();
      xhr.onerror = function(error) {
        return reject(xhr.statusText);
      };
      return xhr.onload = function() {
        if (xhr.readyState !== 4) {
          return reject(xhr.statusText);
        }
        return resolve(xhr.response);
      };
    });
  };

  return PixelUtil;

})(PixelData);

module.exports = new PixelUtil;

module.exports.PixelUtil = PixelUtil;
