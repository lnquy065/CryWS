// Generated by CoffeeScript 1.10.0
var PixelData, PixelType, Promise,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Promise = require('bluebird');

PixelType = (require('./pixel-type')).PixelType;

PixelData = (function(superClass) {
  extend(PixelData, superClass);

  function PixelData() {
    return PixelData.__super__.constructor.apply(this, arguments);
  }

  PixelData.prototype.fetchImageData = function(file) {
    var promise;
    promise = (function() {
      switch (this.getTypeof(file)) {
        case 'path':
          return this.fetchImageDataViaUrl(file);
        case 'url':
          return this.fetchImageDataViaUrl(file);
        case 'datauri':
          return this.fetchImageDataViaDatauri(file);
        case 'binary':
          return this.fetchImageDataViaBinary(file);
        case 'blob':
          return this.fetchImageDataViaBlob(file);
        case 'file':
          return this.fetchImageDataViaBlob(file);
        case 'image':
          return this.fetchImageDataViaUrl(file.src);
        default:
          return this.fetchImageDataViaBuffer(file);
      }
    }).call(this);
    return promise;
  };

  PixelData.prototype.fetchImageDataViaUrl = function(url) {
    return new Promise((function(_this) {
      return function(resolve, reject) {
        var image;
        image = new Image;
        image.crossOrigin = 'Anonymous';
        image.src = url;
        image.onerror = function(error) {
          return reject(error.message);
        };
        return image.onload = function() {
          return resolve(_this.getImageData(image));
        };
      };
    })(this));
  };

  PixelData.prototype.fetchImageDataViaDatauri = function(datauri) {
    var binary;
    binary = atob(datauri.slice(datauri.indexOf(',') + 1));
    return this.fetchImageDataViaBinary(binary);
  };

  PixelData.prototype.fetchImageDataViaBinary = function(binary) {
    return this.fetchImageDataViaBuffer(this.getBufferBinary(binary));
  };

  PixelData.prototype.fetchImageDataViaBuffer = function(buffer) {
    var type;
    type = this.getImageType(buffer).type;
    return this.fetchImageDataViaBlob(new Blob([buffer], {
      type: type
    }));
  };

  PixelData.prototype.fetchImageDataViaBlob = function(blob) {
    var url;
    url = typeof URL !== "undefined" && URL !== null ? URL : webkitURL;
    return this.fetchImageDataViaUrl(url.createObjectURL(blob));
  };

  PixelData.prototype.fetchObjectUrl = function(blob) {
    return new Promise(function(resolve, reject) {
      return resolve(blob);
    });
  };

  PixelData.prototype.getImageData = function(image) {
    var context;
    context = document.createElement('canvas').getContext('2d');
    context.canvas.width = image.width;
    context.canvas.height = image.height;
    context.drawImage(image, 0, 0);
    return context.getImageData(0, 0, image.width, image.height);
  };

  PixelData.prototype.createImageData = function(width, height) {
    var U8CA, context, imageData;
    U8CA = typeof Uint8ClampedArray !== "undefined" && Uint8ClampedArray !== null ? Uint8ClampedArray : Uint8Array;
    if (typeof document !== "undefined" && document !== null) {
      context = document.createElement('canvas').getContext('2d');
      return context.createImageData(width, height);
    } else {
      imageData = {
        width: width,
        height: height
      };
      imageData.data = new U8CA(width * height * 4);
      return imageData;
    }
  };

  PixelData.prototype.set = function(to, from) {
    var dataType, i, results;
    dataType = Object.prototype.toString.call(to.data);
    if (to.data.set == null) {
      if (to.data.length !== from.data.length) {
        throw new RangeError("Source is invalid(" + to.data.length + " == " + from.data.length + ")");
      }
      i = 0;
      results = [];
      while (from.data[i] != null) {
        to.data[i] = from.data[i];
        results.push(i++);
      }
      return results;
    } else {
      return to.data.set(from.data);
    }
  };

  return PixelData;

})(PixelType);

module.exports = new PixelData;

module.exports.PixelData = PixelData;
